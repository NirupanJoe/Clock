{"version":3,"sources":["reportWebVitals.js","core/actions.js","core/config.js","core/context.js","core/seed.js","components/clockSelect.js","services/clockManagement.js","components/analogClockHour.js","components/analogClockMinute.js","components/analogClockSecond.js","components/analogClock.js","components/hourSelect.js","components/digitalClock.js","components/clockType.js","components/clockDisplay.js","services/ticker.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","actions","increaseCount","state","data","count","setTime","time","alterClockDisplay","clock","hourSelect","hour","clockSelect","clockType","config","countStart","increment","clockDelay","hours","clocks","context","seed","refreshID","rndString","Date","option","ClockSelect","value","onChange","evt","target","map","clockManagement","getTimes","date","getHour","getHours","getMinute","getMinutes","getSecond","getSeconds","minute","second","local","toLocaleString","timeStyle","hour12","AnalogClockHour","thirty","className","style","transform","AnalogClockMinute","six","AnalogClockSecond","AnalogClock","HourSelect","DigitalClock","ClockType","ClockDisplay","TickerService","clockService","setInterval","App","useEffect","Entry","useState","setState","updateContext","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f713913.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n\tif(onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","const increaseCount = ({ state, data }) => ({\n\tcount: state.count + data,\n});\nconst setTime = ({ data }) => ({\n\ttime: data,\n});\nconst alterClockDisplay = ({ data }) => ({\n\tclock: data,\n});\nconst hourSelect = ({ data }) => ({\n\thour: data,\n});\nconst clockSelect = ({ data }) => ({\n\tclockType: data,\n});\n\nconst actions = {\n\tincreaseCount,\n\tsetTime,\n\talterClockDisplay,\n\thourSelect,\n\tclockSelect,\n};\n\nexport default actions;\n","const config = {\n\tcountStart: 0,\n\tincrement: 1,\n\tclockDelay: 1000,\n\thours: ['hour12', 'hour24'],\n\tclocks: ['Digital', 'Analog'],\n};\n\nexport default config;\n","import actions from './actions';\nimport config from './config';\nimport seed from './seed';\n\nconst context = {\n\tactions,\n\tconfig,\n\tseed,\n};\n\nexport default context;\n","import config from './config';\nimport { rndString } from '@laufire/utils/random';\n\nconst refreshIDLength = 4;\n\nconst seed = {\n\tcount: config.countStart,\n\trefreshID: rndString(refreshIDLength),\n\ttime: new Date(),\n\thour: config.hours[0],\n\tclockType: config.clocks[1],\n};\n\nexport default seed;\n","import { React } from 'react';\nimport context from '../core/context';\n\nconst option = (clock) => <option key={ clock }>{clock}</option>;\n\nconst ClockSelect = () =>\n\t<div>\n\t\t<label>ClockType : </label>\n\t\t<select\n\t\t\tvalue={ context.state.clockType }\n\t\t\tonChange={ (evt) => context.actions.clockSelect(evt.target.value) }\n\t\t>\n\t\t\t{ context.config.clocks.map(option) }\n\t\t</select>\n\t</div>;\n\nexport default ClockSelect;\n","const ten = 10;\n\nconst getTimes = (date) => {\n\tconst getHour = date.getHours();\n\tconst getMinute = date.getMinutes();\n\tconst getSecond = date.getSeconds();\n\tconst hour = getHour < ten ? `0${ getHour }` : getHour;\n\tconst minute = getMinute < ten ? `0${ getMinute }` : getMinute;\n\tconst second = getSecond < ten ? `0${ getSecond }` : getSecond;\n\tconst local = date.toLocaleString('en-IN',\n\t\t{ timeStyle: 'medium', hour12: 'true' });\n\n\treturn {\n\t\thour,\n\t\tminute,\n\t\tsecond,\n\t\tlocal,\n\t};\n};\n\nconst clockManagement = {\n\tgetTimes,\n};\n\nexport default clockManagement;\n","import { React } from 'react';\n\nconst AnalogClockHour = (hour, thirty) =>\n\t<div\n\t\tclassName=\"hour\"\n\t\tstyle={ { transform: `rotate(${ hour * thirty }deg)` } }\n\t/>;\n\nexport default AnalogClockHour;\n","import { React } from 'react';\n\nconst AnalogClockMinute = (minute, six) =>\n\t<div\n\t\tclassName=\"minute\"\n\t\tstyle={ { transform: `rotate(${ minute * six }deg)` } }\n\t/>;\n\nexport default AnalogClockMinute;\n","import { React } from 'react';\n\nconst AnalogClockSecond = (second, six) =>\n\t<div\n\t\tclassName=\"second\"\n\t\tstyle={ { transform: `rotate(${ second * six }deg)` } }\n\t/>;\n\nexport default AnalogClockSecond;\n","import { React } from 'react';\nimport './analogClock.css';\nimport context from '../core/context';\nimport clockManagement from '../services/clockManagement';\nimport AnalogClockHour from './analogClockHour';\nimport AnalogClockMinute from './analogClockMinute';\nimport AnalogClockSecond from './analogClockSecond';\n\nconst six = 6;\nconst thirty = 30;\n\nconst AnalogClock = () => {\n\tconst { hour, minute, second } = clockManagement\n\t\t.getTimes(context.state.time);\n\n\treturn <div className=\"clock\">\n\t\t<div className=\"container\">\n\t\t\t<div className=\"clock-circle\"> </div>\n\t\t\t{AnalogClockHour(hour, thirty)}\n\t\t\t{AnalogClockMinute(minute, six)}\n\t\t\t{AnalogClockSecond(second, six)}\n\t\t</div>\n\t</div>;\n};\n\nexport default AnalogClock;\n","import { React } from 'react';\nimport context from '../core/context';\n\nconst option = (hour) => <option key={ hour }>{hour}</option>;\n\nconst HourSelect = () =>\n\t<div>\n\t\t<label>Hour : </label>\n\t\t<select\n\t\t\tvalue={ context.state.hour }\n\t\t\tonChange={ (evt) => context.actions.hourSelect(evt.target.value) }\n\t\t>\n\t\t\t{ context.config.hours.map(option) }\n\t\t</select>\n\t</div>;\n\nexport default HourSelect;\n","import { React } from 'react';\nimport context from '../core/context';\nimport HourSelect from './hourSelect';\nimport clockManagement from '../services/clockManagement';\n\nconst DigitalClock = () => {\n\tconst { hour, minute, second, local } = clockManagement\n\t\t.getTimes(context.state.time);\n\tconst clock = context.state.hour === 'hour12'\n\t\t? <div className=\"time\">{local}</div>\n\t\t: <div className=\"time\">{ hour }:{ minute }:{ second }</div>;\n\n\treturn (\n\t\t<div>\n\t\t\t<div>{HourSelect()}</div>\n\t\t\t{ clock }\n\t\t</div>\n\t);\n};\n\nexport default DigitalClock;\n","import { React } from 'react';\nimport context from '../core/context';\nimport AnalogClock from './analogClock';\nimport DigitalClock from './digitalClock';\n\nconst ClockType = () => {\n\tconst clock = context.state.clockType === 'Digital'\n\t\t? <div>\n\t\t\t<div>{DigitalClock()}</div>\n\t\t</div>\n\t\t: <div>{AnalogClock()}</div>;\n\n\treturn clock;\n};\n\nexport default ClockType;\n","import { React } from 'react';\nimport ClockSelect from './clockSelect';\nimport ClockType from './clockType';\n\nconst ClockDisplay = () =>\n\t<div>\n\t\t<div>{ClockSelect()}</div>\n\t\t{ClockType()}\n\t</div>;\n\nexport default ClockDisplay;\n","import context from '../core/context';\n\nconst clockService = () => {\n\tconst { clockDelay } = context.config;\n\tconst { setTime } = context.actions;\n\n\tsetInterval(() => setTime(new Date()), clockDelay);\n};\n\nconst TickerService = {\n\tclockService,\n};\n\nexport default TickerService;\n","import { React, useEffect } from 'react';\nimport './App.css';\nimport ClockDisplay from './components/clockDisplay';\nimport TickerService from './services/ticker';\n\nconst App = () => {\n\tuseEffect(TickerService.clockService, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div>{ ClockDisplay() }</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport updateContext from '@laufire/resist';\nimport './index.css';\nimport App from './App';\nimport context from './core/context';\n\nconst Entry = () => {\n\tconst [state, setState] = useState(context.seed);\n\n\tupdateContext(context, { state, setState });\n\n\treturn App(context);\n};\n\nReactDOM.render(<React.StrictMode>\n\t<Entry/>\n</React.StrictMode>,\ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}